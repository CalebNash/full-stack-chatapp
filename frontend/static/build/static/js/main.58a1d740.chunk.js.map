{"version":3,"sources":["components/Register.js","components/Login.js","components/Chat.js","Message.js","serviceWorker.js","index.js"],"names":["Register","props","state","username","email","password1","password2","handleChange","bind","event","this","setState","target","name","value","className","onSubmit","handleRegistration","htmlFor","type","id","title","onChange","React","Component","Login","password","register","handleLogin","onClick","ChatList","message","user","Chat","messages","handlePost","fetchMessages","setInterval","fetch","then","response","json","data","catch","error","console","log","e","msg","usr","preventDefault","obj","options","method","headers","Cookies","get","body","JSON","stringify","handleError","err","warn","responce","key","set","map","handleLogout","Message","loggedIn","page","reg","detail","remove","display","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kUA0CeA,E,kDAtCb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,SAAU,GACVC,MAAO,GACPC,UAAW,GACXC,UAAW,IAGb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBATJ,E,yDAYLC,GACXC,KAAKC,SAAL,eAAgBF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,U,+BAG1C,IAAD,OACN,OACE,6BACA,wCACA,0BAAMC,UAAU,SAASC,SAAU,SAACP,GAAD,OAAW,EAAKR,MAAMgB,mBAAmBR,EAAO,EAAKP,SACxF,yBAAKa,UAAU,cACb,2BAAOG,QAAQ,SAAf,YACA,2BAAOC,KAAK,OAAOJ,UAAU,eAAeK,GAAG,WAAWP,KAAK,WAAWC,MAAOJ,KAAKR,MAAMmB,MAAOC,SAAUZ,KAAKH,eAClH,2BAAOW,QAAQ,SAAf,SACA,2BAAOC,KAAK,QAAQJ,UAAU,eAAeK,GAAG,QAAQP,KAAK,QAAQC,MAAOJ,KAAKR,MAAMmB,MAAOC,SAAUZ,KAAKH,eAC7G,2BAAOW,QAAQ,SAAf,aACA,2BAAOC,KAAK,OAAOJ,UAAU,eAAeK,GAAG,YAAYP,KAAK,YAAYC,MAAOJ,KAAKR,MAAMmB,MAAOC,SAAUZ,KAAKH,eACpH,2BAAOW,QAAQ,SAAf,aACA,2BAAOC,KAAK,OAAOJ,UAAU,eAAeK,GAAG,YAAYP,KAAK,YAAYC,MAAOJ,KAAKR,MAAMmB,MAAOC,SAAUZ,KAAKH,gBAEtH,4BAAQY,KAAK,SAASJ,UAAU,mBAAhC,c,GAhCiBQ,IAAMC,WCsCdC,E,kDArCb,WAAYxB,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,SAAU,GACVC,MAAO,GACPsB,SAAU,GACVC,UAAU,GAGZ,EAAKpB,aAAe,EAAKA,aAAaC,KAAlB,gBATJ,E,yDAYLC,GACXC,KAAKC,SAAL,eAAgBF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,U,+BAG1C,IAAD,OACN,OACE,6BACA,qCACA,0BAAMC,UAAU,SAASC,SAAU,SAACP,GAAD,OAAW,EAAKR,MAAM2B,YAAYnB,EAAO,EAAKP,MAAO,EAAKA,MAAMyB,YACnG,yBAAKZ,UAAU,cACb,2BAAOG,QAAQ,SAAf,YACA,2BAAOC,KAAK,OAAOJ,UAAU,eAAeK,GAAG,WAAWP,KAAK,WAAWC,MAAOJ,KAAKR,MAAMmB,MAAOC,SAAUZ,KAAKH,eAClH,2BAAOW,QAAQ,SAAf,SACA,2BAAOC,KAAK,QAAQJ,UAAU,eAAeK,GAAG,QAAQP,KAAK,QAAQC,MAAOJ,KAAKR,MAAMmB,MAAOC,SAAUZ,KAAKH,eAC7G,2BAAOW,QAAQ,SAAf,YACA,2BAAOC,KAAK,OAAOJ,UAAU,eAAeK,GAAG,WAAWP,KAAK,WAAWC,MAAOJ,KAAKR,MAAMmB,MAAOC,SAAUZ,KAAKH,gBAEpH,4BAAQY,KAAK,SAASJ,UAAU,mBAAhC,SACA,4BAAQI,KAAK,SAASJ,UAAU,kBAAkBc,QAAS,kBAAM,EAAKlB,SAAS,CAACgB,UAAU,MAA1F,kB,GA/BcJ,IAAMC,WCA1B,SAASM,EAAS7B,GAChB,OACE,6BAAMA,EAAM8B,QAAQC,KAApB,KAA4B/B,EAAM8B,QAAQA,S,IA6E/BE,E,kDAvEb,WAAYhC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXgC,SAAU,GACVH,QAAS,GACTC,KAAM,IAGR,EAAKzB,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAK2B,WAAa,EAAKA,WAAW3B,KAAhB,gBAClB,EAAK4B,cAAgB,EAAKA,cAAc5B,KAAnB,gBAVL,E,gEAchBE,KAAK0B,gBACLC,YAAY3B,KAAK0B,cAAe,O,sCAGlB,IAAD,OACZE,MAAM,kBACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAK/B,SAAS,CAACuB,SAAUQ,OACtCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,SAAUF,Q,0EAGvBG,EAAGC,EAAKC,G,sFACvBF,EAAEG,iBACGC,EAAM,CAACnB,KAAMiB,EAAKlB,QAASiB,GAC1BI,EAAU,CACdC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAeC,IAAQC,IAAI,cAE7BC,KAAMC,KAAKC,UAAUR,IAGjBS,EAAc,SAACC,GAAD,OAAShB,QAAQiB,KAAKD,I,SACnBvB,MAAM,iBAAkBc,G,cAAzCW,E,gBACaA,EAAStB,OAAOE,MAAMiB,G,QAAnClB,E,QAEEsB,KACNT,IAAQU,IAAI,gBAAZ,gBAAsCvB,EAAKsB,M,0IAKnCvD,GACXC,KAAKC,SAAL,eAAgBF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,U,+BAG1C,IAAD,OAEAoB,EAAWxB,KAAKR,MAAMgC,SAASgC,KAAI,SAAAnC,GAAO,OAAI,kBAACD,EAAD,CAAUkC,IAAKjC,EAAQX,GAAIW,QAASA,OACxF,OACE,6BACA,wCACA,4BAAQZ,KAAK,SAASJ,UAAU,kBAAkBc,QAAS,kBAAM,EAAK5B,MAAMkE,eAA5E,UACE,0BAAMpD,UAAU,SAASC,SAAU,SAACP,GAAD,OAAW,EAAK0B,WAAW1B,EAAO,EAAKP,MAAM6B,QAAS,EAAK7B,MAAM8B,QAClG,yBAAKjB,UAAU,cACb,2BAAOG,QAAQ,SAAf,eACA,2BAAOC,KAAK,OAAOJ,UAAU,eAAeK,GAAG,cAAcP,KAAK,UAAUC,MAAOJ,KAAKR,MAAM6B,QAAST,SAAUZ,KAAKH,gBAE1H,4BAAQY,KAAK,SAASJ,UAAU,mBAAhC,SAECmB,O,GAlEUX,IAAMC,WCqGV4C,E,kDAvGb,WAAYnE,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXmE,UAAU,EACVC,KAAM,SAER,EAAKrD,mBAAqB,EAAKA,mBAAmBT,KAAxB,gBAC1B,EAAKoB,YAAc,EAAKA,YAAYpB,KAAjB,gBACnB,EAAK2D,aAAe,EAAKA,aAAa3D,KAAlB,gBARJ,E,wGAWOuC,EAAGI,G,oFAC1BJ,EAAEG,iBAEIE,EAAU,CACdC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAeC,IAAQC,IAAI,cAE7BC,KAAMC,KAAKC,UAAUR,IAGjBS,EAAc,SAACC,GAAD,OAAShB,QAAQiB,KAAKD,I,SACnBvB,MAAM,kCAAmCc,G,cAA1DW,E,gBACaA,EAAStB,OAAOE,MAAMiB,G,QAAnClB,E,QAEEsB,MACNT,IAAQU,IAAI,gBAAZ,gBAAsCvB,EAAKsB,MAC3CtD,KAAKC,SAAS,CAAC2D,KAAM,W,qLAKPvB,EAAGI,EAAKoB,G,gFACxBxB,EAAEG,kBACCqB,E,gBACD7D,KAAKC,SAAS,CAAC2D,KAAM,a,8BAEflB,EAAU,CACdC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAeC,IAAQC,IAAI,cAE7BC,KAAMC,KAAKC,UAAUR,IAGjBS,EAAc,SAACC,GAAD,OAAShB,QAAQiB,KAAKD,I,SACnBvB,MAAM,2BAA4Bc,G,cAAnDW,E,iBACaA,EAAStB,OAAOE,MAAMiB,G,SAAnClB,E,QAEEsB,MACNT,IAAQU,IAAI,gBAAZ,gBAAsCvB,EAAKsB,MAC3CtD,KAAKC,SAAS,CAAC0D,UAAU,IACzB3D,KAAKC,SAAS,CAAC2D,KAAM,W,wLAKRvB,G,kFACjBA,EAAEG,iBAEIE,EAAU,CACdC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,cAAeC,IAAQC,IAAI,eAIzBI,EAAc,SAACC,GAAD,OAAShB,QAAQiB,KAAKD,I,SACnBvB,MAAM,4BAA6Bc,G,cAApDW,E,gBACaA,EAAStB,OAAOE,MAAMiB,G,OAEtB,6B,OAAXY,SACNjB,IAAQkB,OAAO,iBACf/D,KAAKC,SAAS,CAAC2D,KAAM,W,uIAMvB,IACII,EADAJ,EAAO5D,KAAKR,MAAMoE,KAYtB,MATY,aAATA,EACDI,EAAU,kBAAC,EAAD,CAAUzD,mBAAsBP,KAAKO,qBAC/B,UAATqD,EACPI,EAAU,kBAAC,EAAD,CAAO9C,YAAelB,KAAKkB,cACrB,UAAT0C,IACPI,EAAU,kBAAC,EAAD,CAAMP,aAAgBzD,KAAKyD,gBAKvC,yBAAKpD,UAAU,aACd2D,O,GAlGiBnD,IAAMC,WCKRmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEd9C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMb,c","file":"static/js/main.58a1d740.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass Register extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n      password1: '',\n      password2: '',\n\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  render(){\n    return(\n      <div>\n      <h1>Register</h1>\n      <form className=\"col-12\" onSubmit={(event) => this.props.handleRegistration(event, this.state)}>\n      <div className=\"form-group\">\n        <label htmlFor=\"title\">username</label>\n        <input type=\"text\" className=\"form-control\" id=\"username\" name=\"username\" value={this.state.title} onChange={this.handleChange}/>\n        <label htmlFor=\"title\">email</label>\n        <input type=\"email\" className=\"form-control\" id=\"email\" name=\"email\" value={this.state.title} onChange={this.handleChange}/>\n        <label htmlFor=\"title\">password1</label>\n        <input type=\"text\" className=\"form-control\" id=\"password1\" name=\"password1\" value={this.state.title} onChange={this.handleChange}/>\n        <label htmlFor=\"title\">password2</label>\n        <input type=\"text\" className=\"form-control\" id=\"password2\" name=\"password2\" value={this.state.title} onChange={this.handleChange}/>\n      </div>\n      <button type=\"submit\" className=\"btn btn-primary\">Save</button>\n    </form>\n      </div>\n    )\n  }\n}\n\nexport default Register;\n","import React from 'react';\n\n\nclass Login extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n      password: '',\n      register: false,\n\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  render(){\n    return(\n      <div>\n      <h1>Login</h1>\n      <form className=\"col-12\" onSubmit={(event) => this.props.handleLogin(event, this.state, this.state.register)}>\n      <div className=\"form-group\">\n        <label htmlFor=\"title\">username</label>\n        <input type=\"text\" className=\"form-control\" id=\"username\" name=\"username\" value={this.state.title} onChange={this.handleChange}/>\n        <label htmlFor=\"title\">email</label>\n        <input type=\"email\" className=\"form-control\" id=\"email\" name=\"email\" value={this.state.title} onChange={this.handleChange}/>\n        <label htmlFor=\"title\">password</label>\n        <input type=\"text\" className=\"form-control\" id=\"password\" name=\"password\" value={this.state.title} onChange={this.handleChange}/>\n      </div>\n      <button type=\"submit\" className=\"btn btn-primary\">Login</button>\n      <button type=\"submit\" className=\"btn btn-primary\" onClick={() => this.setState({register: true})}>Register</button>\n    </form>\n      </div>\n    )\n  }\n}\n\nexport default Login;\n","import React from 'react';\nimport Cookies from 'js-cookie';\n\nfunction ChatList(props){\n  return(\n    <div>{props.message.user}: {props.message.message}</div>\n  );\n}\n\n\nclass Chat extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      messages: [],\n      message: '',\n      user: '',\n\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handlePost = this.handlePost.bind(this);\n    this.fetchMessages = this.fetchMessages.bind(this);\n  }\n\n  componentDidMount(){\n    this.fetchMessages();\n    setInterval(this.fetchMessages, 2000);\n  }\n\n  fetchMessages(){\n     fetch('/api/v1/chats/')\n     .then(response => response.json())\n     .then(data => this.setState({messages: data}))\n     .catch(error => console.log('Error:', error));\n   }\n\n   async handlePost(e, msg, usr){\n     e.preventDefault();\n    const obj = {user: usr, message: msg}\n     const options = {\n       method: 'POST',\n       headers: {\n         'Content-Type': 'application/json',\n         'X-CSRFToken': Cookies.get('csrftoken'),\n       },\n       body: JSON.stringify(obj)\n     };\n\n     const handleError = (err) => console.warn(err);\n     const responce = await fetch('/api/v1/chats/', options);\n     const data = await responce.json().catch(handleError);\n\n     if(data.key){\n       Cookies.set('Authorization', `Token ${data.key}`)\n     }\n\n   }\n\n  handleChange(event) {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  render(){\n    //console.log(this.state.messages);\n    const messages = this.state.messages.map(message => <ChatList key={message.id} message={message}/>)\n    return(\n      <div>\n      <h1>Messages</h1>\n      <button type=\"submit\" className=\"btn btn-primary\" onClick={() => this.props.handleLogout}>Logout</button>\n        <form className=\"col-12\" onSubmit={(event) => this.handlePost(event, this.state.message, this.state.user)}>\n          <div className=\"form-group\">\n            <label htmlFor=\"title\">New Message</label>\n            <input type=\"text\" className=\"form-control\" id=\"New Message\" name=\"message\" value={this.state.message} onChange={this.handleChange}/>\n          </div>\n        <button type=\"submit\" className=\"btn btn-primary\">Send</button>\n        </form>\n        {messages}\n      </div>\n    )\n  }\n}\n\nexport default Chat;\n","import React from 'react';\nimport Cookies from 'js-cookie';\nimport './App.css';\nimport Register from './components/Register.js';\nimport Login from './components/Login.js';\nimport Chat from './components/Chat.js';\n\nclass Message extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      loggedIn: false,\n      page: 'login',\n    }\n    this.handleRegistration = this.handleRegistration.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleLogout = this.handleLogout.bind(this);\n  }\n\n  async handleRegistration(e, obj){\n    e.preventDefault();\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRFToken': Cookies.get('csrftoken'),\n      },\n      body: JSON.stringify(obj)\n    };\n\n    const handleError = (err) => console.warn(err);\n    const responce = await fetch('/api/v1/rest-auth/registration/', options);\n    const data = await responce.json().catch(handleError);\n\n    if(data.key){\n      Cookies.set('Authorization', `Token ${data.key}`)\n      this.setState({page: 'login'});\n    }\n\n  }\n\n  async handleLogin(e, obj, reg){\n    e.preventDefault();\n    if(reg){\n      this.setState({page: 'register'});\n    }else{\n      const options = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': Cookies.get('csrftoken'),\n        },\n        body: JSON.stringify(obj)\n      };\n\n      const handleError = (err) => console.warn(err);\n      const responce = await fetch('/api/v1/rest-auth/login/', options);\n      const data = await responce.json().catch(handleError);\n\n      if(data.key){\n        Cookies.set('Authorization', `Token ${data.key}`)\n        this.setState({loggedIn: true});\n        this.setState({page: 'chats'})\n      }\n    }\n  }\n\n  async handleLogout(e){\n    e.preventDefault();\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRFToken': Cookies.get('csrftoken'),\n      },\n    };\n\n    const handleError = (err) => console.warn(err);\n    const responce = await fetch('/api/v1/rest-auth/logout/', options);\n    const data = await responce.json().catch(handleError);\n\n    if(data.detail === \"Successfully logged out.\"){\n      Cookies.remove('Authorization');\n      this.setState({page: 'login'});\n    }\n\n  }\n\n  render(){\n    let page = this.state.page;\n    let display;\n\n    if(page === 'register'){\n      display = <Register handleRegistration = {this.handleRegistration}/>;\n    }else if(page === 'login'){\n      display = <Login handleLogin = {this.handleLogin}/>;\n    }else if(page === 'chats'){\n      display = <Chat handleLogout = {this.handleLogout}/>;\n    }\n\n\n    return(\n    <div className='container'>\n    {display}\n    </div>\n    )\n  }\n}\n\nexport default Message;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport Message from './Message';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Message />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}